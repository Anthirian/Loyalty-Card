package rsa;

import java.io.*;
import java.math.BigInteger;

import java.security.*;
import java.security.spec.*;
import java.security.interfaces.*;

/**
 * Generate an RSA public/private keypair.
 * 
 * @version $Revision: 1.1 $
 */
@SuppressWarnings("unused")
public class RSAKeyGen {
	private KeyPair keypair;
	private RSAPublicKey publickey;
	private RSAPrivateKey privatekey;
	
	/**
	 * Generates an RSA public/private key pair.
	 */
	public RSAKeyGen() {
		try {
			/* Generate keypair. */
			System.out.println("Generating keys...");
			KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(512);
			keypair = generator.generateKeyPair();
			publickey = (RSAPublicKey) keypair.getPublic();
			privatekey = (RSAPrivateKey) keypair.getPrivate();

			System.out.println("modulus = " + publickey.getModulus());
			System.out.println("pubexpint = " + publickey.getPublicExponent());
			System.out.println("privexpint = "
					+ privatekey.getPrivateExponent());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
		
	/**
	 * Getter for the public key.
	 * @return The public key generated by <code>this</code> RSAKeyGen object.
	 */
	public RSAPublicKey getPublicKey() {
		return publickey;
	}
	
	/**
	 * Getter for the private key.
	 * @return The private key generated by <code>this</code> RSAKeyGen object.
	 */
	public RSAPrivateKey getPrivateKey() {
		return privatekey;
	}
}
